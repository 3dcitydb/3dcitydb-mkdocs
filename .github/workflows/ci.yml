name: Deploy MkDocs Docs

on:
  push:
    branches:
      - main
      - "release-*" # Trigger on release-X.Y branches

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: docs-deploy
      cancel-in-progress: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Important for mike to access full git history

      - name: Extract version from branch name
        id: version
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "Branch name: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" == "main" ]]; then
            VERSION="edge"
            echo "Main branch detected, using edge version"
          elif [[ "$BRANCH_NAME" =~ ^release-([0-9]+)\.([0-9]+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"
            echo "Release branch detected, extracted version: $VERSION"
          else
            echo "Error: Branch name must be 'main' or follow 'release-X.Y' format (e.g., release-1.0)"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          pip install -U -r requirements.txt

      - name: Configure git user
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Deploy edge version (main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          mike deploy --push --update-aliases edge
      - name: Get all existing versions for latest determination
        if: startsWith(github.ref, 'refs/heads/release-')
        id: get_versions
        run: |
          # Get all release branches and extract major.minor versions
          git fetch origin
          RELEASE_BRANCHES=$(git branch -r | grep 'origin/release-' | sed 's|.*origin/release-||' | grep -E '^[0-9]+\.[0-9]+$' | sort -V)
          CURRENT_VERSION="${{ steps.version.outputs.version }}"

          # Find the latest version from all release branches
          LATEST_VERSION=$(echo "$RELEASE_BRANCHES" | tail -n 1)
          LATEST_VERSION=${LATEST_VERSION:-$CURRENT_VERSION}

          # Check if current version is the latest
          if [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
            IS_LATEST="true"
          else
            IS_LATEST="false"
          fi

          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "is_latest=$IS_LATEST" >> $GITHUB_OUTPUT

          echo "Current version: $CURRENT_VERSION"
          echo "All release versions: $RELEASE_BRANCHES"
          echo "Latest version: $LATEST_VERSION"
          echo "Is latest: $IS_LATEST"

      - name: Deploy release version
        if: startsWith(github.ref, 'refs/heads/release-')
        run: |
          mike deploy --push --update-aliases "${{ steps.version.outputs.version }}"

      - name: Update latest alias (only for actual latest version)
        if: (startsWith(github.ref, 'refs/heads/release-')) && steps.get_versions.outputs.is_latest == 'true'
        run: |
          mike deploy --push --update-aliases "${{ steps.version.outputs.version }}" latest
          mike set-default --push latest
          echo "Updated latest alias to point to ${{ steps.version.outputs.version }}"
